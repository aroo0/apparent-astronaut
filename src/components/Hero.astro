---
import Wave from './Wave.astro'
import CarotDown from '../assets/icons/PhCaretDownLight.svg'
import Gradient from './Gradient.astro'
---
<section class="hero noise" id="hero">
    <Gradient/> 
    <div class="mover"></div>
    <div class="container">
    <span class="hello ">Hello, I am</span>
    <h2 class="name">Arek Dec.</h2>
    <hr class="" />
    <span class="devo ">A Frontend Developer based in Cracow, Poland. </span>
    <span class="description ">Deeply passionate about creating immersive UI that captivate users and stays current with new design trends.</span>
  </div>

  <a href="#about">
    <div class="button-down">      
    <img src={CarotDown.src} alt="caret down" width="30" height="30" class="caret"/>
  </a>
  </div>
  <div class="svg-container">
    <Wave />

  </div>
  </section>


  <script defer>
    // Get the SVG element and the hero element
    const svgElement = document.querySelector('.responsive-svg');
    const heroElement = document.querySelector('.hero');

    // Update the height of the hero element based on the SVG's current height
    function updateHeroHeight() {
        const svgHeight = svgElement.getBoundingClientRect().height;
        heroElement.style.minHeight = `calc(100vh + ${svgHeight}px)`;
        }

    // Call the updateHeroHeight function initially and on window resize
    updateHeroHeight();
    window.addEventListener('resize', updateHeroHeight);

    const hero = document.querySelector('.hero');
    const mover = document.querySelector('.mover')

    let mouseX = 0;
    let mouseY = 0;
    let currentX = 0;
    let currentY = 0;
    const ease = 0.01;

    hero.addEventListener("mousemove", e => {
    mouseX = e.clientX;
    mouseY = e.clientY;
    });

    function animate() {
    const dx = mouseX - currentX;
    const dy = mouseY - currentY;

    currentX += dx * ease;
    currentY += dy * ease;

    mover.style.setProperty('--mouse-x', currentX + "px");
    mover.style.setProperty('--mouse-y', currentY + "px");

    requestAnimationFrame(animate);
    }

animate();



    
  </script>

  <style>

.mover {
    opacity: .7;
    width: 800px;
    height: 800px;
    translate: -200px -50px;
    transform: skew(10deg, 5deg);
    position: absolute;
    left: var(--mouse-x);
    top: var(--mouse-y);
    background-image: radial-gradient(ellipse at center, #152020 150px,transparent 70%);

    animation: changeBgColorGradient infinite 15s ease-in-out alternate;


}



.hero {
    background-color: #152020;
    position: relative;
    overflow: hidden;
    background-image:
    linear-gradient(110deg, rgba(30, 34, 34, 0.81) 5%, transparent 30%),
    linear-gradient(90deg, transparent 50%, #111717 100%),
    radial-gradient(at 0% 0%, hsla(175,11%,20%,1) 0px, transparent 50%),
    radial-gradient(at 91% 94%, hsla(173,60%,11%,1) 0px, transparent 50%);
    animation: changeBgColor infinite 15s ease-in-out alternate;
    

    


    &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='4.97' numOctaves='1' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
        pointer-events: none;
        opacity: 0.8;
        z-index: 0;
        mix-blend-mode: soft-light;
        filter: brightness(80%);
    }

    & .container {
        padding-top: 13rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: clamp(1rem, 3vh, 3rem);
        z-index: 4;


    }
    

    & .hello {
        font-size: clamp(0.9rem, 4vw, 2rem);
        color: var(--dark-gray-color);
        transition-delay: 100ms;
        z-index: 4;


    }

    & .name {
        font-family: var(--sec-font);
        font-weight: 400;
        font-size: clamp(2.1rem, 10vw, 5.6rem);
        color: var(--main-light-color);
        line-height: 0.8;
        transition-delay: 200ms;
        z-index: 4;

    }

    & .devo {
        font-size: clamp(1rem, 6vw, 2rem);
        color: var(--main-light-color);
        transition-delay: 400ms;
        z-index: 4;


    }

    & .description {
        font-size: clamp(0.9rem, 4vw, 1.6rem);
        color: var(--sec-light-color);
        font-weight: 300;
        line-height: 1.5;
        max-width: 60ch;
        transition-delay: 500ms;
        z-index: 4;


    }

    & hr {
        border: none; /* Remove default hr border */
        border-top: 2px solid var(--sec-light-color);
        max-width: 50rem;
        transition-delay: 200ms;
        z-index: 4;

        

    }

}

.svg-container {
    position: absolute;
    bottom: -1px;
    width: 100%; /* Make the SVG container span the entire width */
    overflow: hidden; /* Hide any overflow from the SVG */
  }

.button-down {
    border: 1px solid var(--dark-gray-color);
    padding: .9rem .4rem;
    border-radius: 1rem;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    top: 88vh;
    transition: var(--hover-transition);
    z-index: 4;

    &:hover {
        filter: brightness(110%);

    }
}
  </style>